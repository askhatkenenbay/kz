16:21:50 INFO  text_part_composite.Text: Lexeme was parsed to word
16:21:50 INFO  text_part_composite.Text: Lexeme was parsed to word
16:21:50 INFO  text_part_composite.Text: Lexeme was parsed to word
16:21:50 INFO  text_part_composite.Text: Lexeme was parsed to word
16:21:50 INFO  text_part_composite.Text: Lexeme was parsed to word
16:21:50 INFO  text_part_composite.Text: Lexeme was parsed to word
16:21:50 INFO  text_part_composite.Text: Lexeme was parsed to word
16:21:50 INFO  text_part_composite.Text: Lexeme was parsed to word
16:21:50 INFO  text_part_composite.Text: Lexeme was parsed to word
16:21:50 INFO  text_part_composite.Text: Lexeme was parsed to word
16:21:50 INFO  text_part_composite.Text: Lexeme was parsed to word
16:21:50 INFO  text_part_composite.Text: Lexeme was parsed to word
16:21:50 INFO  text_part_composite.Text: Lexeme was parsed to word
16:21:50 INFO  text_part_composite.Text: Lexeme was parsed to word
16:21:50 INFO  text_part_composite.Text: Lexeme was parsed to word
16:21:50 INFO  text_part_composite.Text: Lexeme was parsed to word
16:21:50 INFO  text_part_composite.Text: Lexeme was parsed to word
16:21:50 INFO  text_part_composite.Text: Lexeme was parsed to word
16:21:50 INFO  text_part_composite.Text: Lexeme was parsed to word
16:21:50 INFO  text_part_composite.Text: Lexeme was parsed to word
16:21:50 INFO  text_part_composite.Text: Lexeme was parsed to word
16:21:50 INFO  text_part_composite.Text: Lexeme was parsed to word
16:21:50 INFO  text_part_composite.Text: Sentence was parsed to lexemes
16:21:50 INFO  text_part_composite.Paragraph: Paragraph was parsed to sentences
16:21:50 INFO  text_part_composite.Text: Text was parsed to paragraphs
16:21:50 INFO  text_part_composite.Text: Sorted as --> Отсортировать абзацы по количеству предложений
16:21:50 INFO  text_part_composite.Text: By shared we mean that a variable could be accessed by multiple threads by mutable we mean that its value could change during its lifetime . We may talk about thread safety as if it were about code but what we are really trying to do is protect data from uncontrolled concurrent access . 

Whenever more than one thread accesses a given state variable and one of them might write to it they all must coordinate their access to it using synchronization . The primary mechanism for synchronization in Java is the synchronized keyword which provides exclusive locking but the term synchronization also includes the use of volatile variables explicit locks and atomic variables . 

You should avoid the temptation to think that there are special situations in which this rule does not apply . A program that omits needed synchronization might appear to work passing its tests and performing well for years but it is still broken and may fail at any moment . 

Whether an object needs to be thread-safe depends on whether it will be accessed from multiple threads . This is a property of how the object is used in a program not what it does . Making an object thread-safe requires using synchronization to coordinate access to its mutable state failing to do so could result in data corruption and other undesirable consequences . 

Perhaps surprisingly concurrent programming is not so much about threads or locks any more than civil engineering is about rivets and I-beams . Of course building bridges that do not fall down requires the correct use of a lot of rivets and I-beams just as building concurrent programs require the correct use of threads and locks . But these are just mechanisms-means to an end . Writing thread-safe code is at its core about managing access to state and in particular to shared mutable state . 

Informally an objects state is its data stored in state variables such as instance or static fields . An objects state may include fields from other dependent objects a HashMaps state is partially stored in the HashMap object itself but also in many Map . Entry objects . An objects state encompasses any data that can affect its externally visible behavior . 


16:21:50 INFO  text_part_composite.Text: Sorted as --> Отсортировать слова в предложений по длине
16:21:50 INFO  text_part_composite.Text: a By we be by by we its its mean that mean that could value could shared change during threads mutable variable accessed multiple lifetime . We as if it we to do is may but are talk were code what data from about about thread safety really trying access protect concurrent uncontrolled . 

a of to it to it one and one all more than them they must given state might write their using thread access Whenever accesses variable coordinate synchronization . in is of The for the but the the use and Java term also which locks atomic primary keyword locking provides includes volatile explicit mechanism exclusive variables variables synchronized synchronization synchronization . 

to in You the are not that this rule does avoid think there which apply should special temptation situations . A to it is at its and for but and may any that work well fail omits might tests years still needed appear broken moment program passing performing synchronization . 

an to be on it be will from needs object Whether depends whether threads accessed multiple thread-safe . a a is of is in it how the not This used what does object program property . an to to to do so in its and data using state could other Making object access result mutable failing requires coordinate corruption thread-safe undesirable consequences synchronization . 

is so or is not any and much more than about locks civil about rivets Perhaps threads I-beams concurrent programming engineering surprisingly . a Of do of of as of not the use lot and the use and that fall down just locks course rivets bridges correct I-beams require correct threads building requires building programs concurrent . to an But are end just these mechanisms-means . is at to in to its and code core about state state access shared Writing mutable managing particular thread-safe . 

an is in as or its data such state state stored static fields objects instance variables Informally . a An is in in may the but Map from also many state other state fields stored object itself objects include objects HashMap HashMaps dependent partially . Entry objects . An any can its data that state affect objects visible behavior externally encompasses . 


16:21:50 INFO  text_part_composite.Text: Sorted as --> Отсортировать предложения в абзаце по количеству слов
16:21:50 INFO  text_part_composite.Text: a By we be by by we its its mean that mean that could value could shared change during threads mutable variable accessed multiple lifetime . We as if it we to do is may but are talk were code what data from about about thread safety really trying access protect concurrent uncontrolled . 

a of to it to it one and one all more than them they must given state might write their using thread access Whenever accesses variable coordinate synchronization . in is of The for the but the the use and Java term also which locks atomic primary keyword locking provides includes volatile explicit mechanism exclusive variables variables synchronized synchronization synchronization . 

to in You the are not that this rule does avoid think there which apply should special temptation situations . A to it is at its and for but and may any that work well fail omits might tests years still needed appear broken moment program passing performing synchronization . 

an to be on it be will from needs object Whether depends whether threads accessed multiple thread-safe . a a is of is in it how the not This used what does object program property . an to to to do so in its and data using state could other Making object access result mutable failing requires coordinate corruption thread-safe undesirable consequences synchronization . 

to an But are end just these mechanisms-means . is at to in to its and code core about state state access shared Writing mutable managing particular thread-safe . is so or is not any and much more than about locks civil about rivets Perhaps threads I-beams concurrent programming engineering surprisingly . a Of do of of as of not the use lot and the use and that fall down just locks course rivets bridges correct I-beams require correct threads building requires building programs concurrent . 

Entry objects . An any can its data that state affect objects visible behavior externally encompasses . an is in as or its data such state state stored static fields objects instance variables Informally . a An is in in may the but Map from also many state other state fields stored object itself objects include objects HashMap HashMaps dependent partially . 


